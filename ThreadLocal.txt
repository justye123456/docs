
一、ThreadLocal的常用场景
  1、在进行对象跨层传递的时候，使用ThreadLocal可以避免多次传递，打破层次间的约束。
  2、线程间数据隔离
  3、进行事务操作，用于存储线程事务信息。
  4、数据库连接，Session会话管理
二、ThreadLocal的内存泄露
现象：ThreadLocalMap使用ThreadLocal的弱引用作为key，如果一个ThreadLocal没有外部强引用来引用它，那么系统 GC 的时候，这个ThreadLocal势必会被回收，这样一来，ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的value，如果当前线程再迟迟不结束的话，这些key为null的Entry的value就会一直存在一条强引用链：Thread Ref -> Thread -> ThreaLocalMap -> Entry -> value永远无法回收，造成内存泄漏。
根源：由于ThreadLocalMap的生命周期跟Thread一样长，如果没有手动删除对应key就会导致内存泄漏，而不是因为弱引用。
三、ThreadLocal的最佳实践
 每次使用完ThreadLocal，都调用它的remove()方法，清除数据
